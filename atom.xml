<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://zjy98.github.io</id>
    <title>Just FOR 1998</title>
    <updated>2020-06-15T07:10:02.067Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://zjy98.github.io"/>
    <link rel="self" href="https://zjy98.github.io/atom.xml"/>
    <subtitle>LOVE YOURSELF</subtitle>
    <logo>https://zjy98.github.io/images/avatar.png</logo>
    <icon>https://zjy98.github.io/favicon.ico</icon>
    <rights>All rights reserved 2020, Just FOR 1998</rights>
    <entry>
        <title type="html"><![CDATA[Socket概述]]></title>
        <id>https://zjy98.github.io/post/socket-gai-shu/</id>
        <link href="https://zjy98.github.io/post/socket-gai-shu/">
        </link>
        <updated>2020-06-14T18:07:12.000Z</updated>
        <content type="html"><![CDATA[<h1 id="socket">Socket</h1>
<ul>
<li>协议栈实现<br>
传输层以上由用户态应用程序实现<br>
传输层和网络互联层协议在内核中实现（路由协议由用户态进程实现）<br>
第一第二层一般由硬件实现</li>
<li>UNIX提供给应用程序使用网络功能的方法<br>
BSD将设备和通信管道组织成文件方式，创建方式不同，访问方法相同<br>
终端设备、管道、通信服务Socket</li>
<li>Socket编程接口面向网络通信，不仅仅用于TCP/IP<br>
利用虚拟loopback接口（127.0.0.1）可实现同台计算机进程间通信</li>
</ul>
<h1 id="tcp与udp">TCP与UDP</h1>
<p>TCP：<br>
面向连接，可靠（保证收到的数据是对的，不是保证一定能收到——，字节流传输，不保证报文边界<br>
UDP:<br>
面向数据报，不可靠（丢报，乱序，流量控制，数据报传输），广播和组播</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[牛客网错题]]></title>
        <id>https://zjy98.github.io/post/niu-ke-wang-cuo-ti/</id>
        <link href="https://zjy98.github.io/post/niu-ke-wang-cuo-ti/">
        </link>
        <updated>2020-06-10T08:08:32.000Z</updated>
        <content type="html"><![CDATA[<h1 id="操作系统">操作系统</h1>
<p>1.下列（静态页式管理）内存管理方法不能实现虚存<br>
原因：<br>
页式管理有：<br>
静态页式管理；<br>
动态页式管理；<br>
其中，静态页式管理是在作业或进程执行前，把作业或进程全部装进内存中，如果内存中可用页面数小于请求页面数，该作业或进程等待。<br>
动态页式管理不会把作业或进程一次性全部装进内存，只装入被反复调用或执行的部分，其他部分在执行过程中动态装入。</p>
<p>2.流式文件是指无结构的文件，这种说法正确吗？<br>
正确<br>
原因：文件分为两大类：有结构文件（即记录式文件），无结构文件（即流式文件）。<br>
大量的数据结构和数据库采用有结构文件，大量的源程序，可执行程序，库函数等采用无结构文件　其长度以字节为单位，对流式文件的访问是利用读写指针来指出下一个要访问的字符。<br>
有结构的文件分为定长和不定长两类：<br>
定长又分为：定长记录　变长记录两种<br>
变长记录文件根据文件组织方式的不同又分为：<br>
顺序文件，索引文件，索引顺序文件</p>
<h1 id="数组">数组</h1>
<p>1.数组元素的地址计算与数组的存储方式无关。请问这句话的说法是正确的吗？<br>
错误<br>
二维数组存储方式可以分为行优先和列优先俩种，所以数组的地址计算和数组的存储方式有关。</p>
<h1 id="网络基础">网络基础</h1>
<p>1.以下说法不正确的是（）<br>
HTTP请求消息中Css表示初始URL中的主机和端口<br>
原因： HTTP 请求消息中  Host  表示初始 URL 中的主机和端口 。</p>
<p>2.下列哪个任务不是网络操作系统的基本任务？（    ）<br>
明确本地资源与网络资源之间的差异<br>
解析：网络操作系统的基本任务：<br>
1.屏蔽本地资源与网络资源之间的差异<br>
2.为用户提供基本的网络服务功能<br>
3.管理网络系统的共享资源<br>
4.提供网络系统的安全服务</p>
<p>3.https协议默认端口号是8081，iptables既可以根据IP制定策略，也可以根据端口制定策略<br>
0-1023是周知端口号</p>
<p>4.网络接口卡是局域网组网需要的基本部件。网卡一端连接局域网中的计算机，另一端连接局域网的（传输介质）<br>
原因：网卡是工作在链路层的网络组件，是局域网中连接计算机和传输介质的接口。-----百度百科<br>
（其实网卡工作在一层和二层？</p>
<p>5.在Web开发中，如何实现会话的跟踪？<br>
四种方法实现会话跟踪：URL重写、隐藏表单域、Cookie、Session<br>
A、隐藏表单域一般是在表单提交时在JSP中声明一个隐藏域，可携带数据到表单提交后的页面。如下：<br>
&lt;input type=&quot;hidden&quot; name=&quot;token&quot; value=&quot;&lt;%=session.getAttribute(&quot;token&quot;) %&gt;&quot;&gt;<br>
B、Http是无状态协议，cookie是客户端保存用户会话数据，用于保存用户会话记录。<br>
C、当客户端浏览器禁用cookie时，只有采用URL复写的方式将sessionId携带在URL的末尾来保存会话记录。<br>
D、session是服务端保存用户数据，生成Session时会默认设置一个cookie值为sessionId的cookie保存到客户端</p>
<h1 id="并发-c">并发、C++</h1>
<p>1.多个线程可同时操作一个数据，为了保证该数据的准确性，可将操作该数据的部分改为:<br>
同步<br>
原因：<br>
同步可以理解为加锁</p>
<h1 id="软件工程">软件工程</h1>
<p>1.下列关于数据库设计的叙述中，正确的是（ ）。<br>
在需求分析阶段建立数据字典<br>
原因：按照规范的设计方法，一个完整的数据库设计一般分为以下六个阶段：<br>
⑴需求分析：分析用户的需求，包括数据、功能和性能需求；<br>
⑵概念结构设计：主要采用E-R模型进行设计，包括画E-R图；<br>
⑶逻辑结构设计：通过将E-R图转换成表，实现从E-R模型到关系模型的转换；<br>
⑷数据库物理设计：主要是为所设计的数据库选择合适的存储结构和存取路径；<br>
⑸数据库的实施：包括编程、测试和试运行；<br>
⑹数据库运行与维护：系统的运行与数据库的日常维护。</p>
<p>2.下面哪些测试属于白盒测试 （ ）。<br>
基本路径测试<br>
逻辑覆盖测试<br>
原因：白盒测试法主要有：逻辑覆盖（语句覆盖、路径覆盖、判定覆盖。判断-条件覆盖、条件-组合覆盖）、基本路径测试<br>
黑盒测试主要的方法有：等价类划分法、边界值分析法、错误推测法、因果图法、决策表法、场景法等。</p>
<p>3.下列关于策略处理规则描述正确的是（）<br>
如果子容器的某个策略被配置，则此配置值会覆盖由其父容器所传递下来的配置值<br>
组策略的配置值是有累加性的<br>
系统是先处理计算机配置，再处理用户配置</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进程间的协作、Socket概述]]></title>
        <id>https://zjy98.github.io/post/jin-cheng-jian-de-xie-zuo/</id>
        <link href="https://zjy98.github.io/post/jin-cheng-jian-de-xie-zuo/">
        </link>
        <updated>2020-06-10T03:57:41.000Z</updated>
        <content type="html"><![CDATA[<h1 id="信号灯">信号灯</h1>
<p>UNIX的IPC三样：信号灯、共享内存、消息队列（SEM、SHM、MSG)<br>
信号灯：<br>
控制多进程对共享资源的互斥性访问和进程间同步<br>
策略和机制分离：<br>
UNIX仅提供信号灯机制，访问共享资源的进程自身必须正确使用才能保证正确的互斥和同步<br>
不正确的使用会导致信息访问的不安全和死锁<br>
P操作和V操作：<br>
信号灯机制实现了P操作和V操作，而且比简单的PV操作功能更强<br>
<img src="https://zjy98.github.io/post-images/1591761777085.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1591761855853.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1591761884730.png" alt="" loading="lazy"></p>
<h1 id="共享内存">共享内存</h1>
<p>特点：</p>
<ul>
<li>多个进程共同使用同一段物理内存空间</li>
<li>使用共享内存在多进程间传送数据，速度快，但进程必须自行解决对共享内存访问的互斥和同步问题（例如：使用信号灯通过P/V操作）<br>
应用举例：</li>
<li>数据交换：多进程使用共享内存交换数据（最快的进程间通信方式）</li>
<li>运行监视：协议处理程序把有限状态机和统计信息放入共享内存中<br>
协议处理程序运行过程中可随时启动监视程序，从共享内存中读取数据以窥视当前的状态，了解通信状况<br>
监视程序的启动与终止不影响通信进程，而且这种机制不影响协议处理程序的效率。<br>
<img src="https://zjy98.github.io/post-images/1592149253339.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1592149367085.png" alt="" loading="lazy"></li>
</ul>
<h1 id="内存映射文件">内存映射文件</h1>
<p>传统的访问磁盘文件的模式（磁盘到内存）</p>
<ul>
<li>打开一个文件，然后通过read和write访问文件</li>
</ul>
<p>内存映射（Mrmory Map)方式读写文件</p>
<ul>
<li>现代的Linux和Windows都提供了内存映射方式读写文件的方法</li>
<li>将文件中的一部分连续的区域映射成一段进程虚拟地址空间中的内存<br>
进程获取这段映射内存的指针后，就把这个指针当做普通的数据指针一样引用。修改其中的数据，实际修改了文件，引用其中的数据值，就是读取了文件</li>
<li>访问文件跟内存中的数据访问一样</li>
<li>系统不会为数据文件的内存映射区域分配相同大小的物理内存，而是由页面调度算法自动进行物理内存分配</li>
<li>根据虚拟内存的页面调度算法，按需调入数据文件中的内容，必要时淘汰（可能需要写入）内存页面</li>
</ul>
<p>优点：</p>
<ul>
<li>比使用read和write方式速度更快<br>
这两个系统调用的典型用法：<br>
len=read(fd,buf,nbyte)<br>
len=witr(fd,buf,nbyte)<br>
read需要内核将磁盘数据读入到内核缓冲区，再复制到用户进程的缓冲区中，与write方法类似<br>
内尺寸映射方式是访问文件速度最快的方法</li>
<li>提供了多个独立启动的进程共享内存的一种手段<br>
多个进程都通过指针映射同一个文件的相同区域，实际访问同一段内存区域，这段内存是同一文件区域的内存映射<br>
某进程修改数据，就会导致另一个进程可以访问到的数据发生变化，实现多进程共享内存的另外一种方式<br>
在Windows下就可以通过这种方式实现多进程共享内存<br>
注意：多进程之间访问时的同步和互斥，必须通过信号量等机制保证</li>
</ul>
<h2 id="内存映射文件相关系统调用">内存映射文件相关系统调用</h2>
<p>系统调用mmap<br>
通知系统把哪个文件的哪个区域以何种方式映射<img src="https://zjy98.github.io/post-images/1592150498893.png" alt="" loading="lazy"><br>
mmap的参数：<br>
<img src="https://zjy98.github.io/post-images/1592150537596.png" alt="" loading="lazy"></p>
<h1 id="文件和记录的锁定">文件和记录的锁定</h1>
<p>类似读写者问题<br>
<img src="https://zjy98.github.io/post-images/1592150594141.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1592150714069.png" alt="" loading="lazy"><br>
文件和记录锁定机制<br>
文件可以同时被多个进程访问，需要互斥<br>
（操作系统书中的读写者问题）<br>
使用信号灯机制和共享内存等方法<br>
非常复杂，Linux提供了对文件和记录的锁定机制，用于多进程间对文件的互斥性访问。<br>
术语“记录”：<br>
指的是一个文件中从某一位置开始的连续字节流，Linux提供了对记录锁定的机制，用于锁定文件中的某一部分<br>
可以把一个记录定义为从文件首开始直至文件尾，所以文件锁定实际上是记录锁定的一种特例</p>
<p>共享锁和互斥锁<br>
共享锁（也叫读锁）<br>
多进程读操作可以同时进行，即某一进程读记录时，不排斥其他进程也读该记录，但是排斥任何对该记录的写操作<br>
互斥锁（也叫写锁）<br>
当某进程写记录时，排斥所有其他进程对该记录的读和写<br>
<img src="https://zjy98.github.io/post-images/1592151062717.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1592157929867.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1592157933873.png" alt="" loading="lazy"><br>
用C语言写读写者</p>
<p>错题：<br>
1.使用cat打印出一个有100行数据的文本文件，但只能显示出前50行，后50行被阻塞而迟迟不能显示。出现这种现象的一种可能原因是：其他某进程使用fcntl()系统调用将这个文件的后50行数据上了“写锁”，因为写锁锁定时不允许读导致cat被阻塞，如果该进程上锁类型是“读锁”，那么，cat只是打开文件读，将不会被阻塞（错）<br>
理由：fcntl执行的是“咨询式锁定”不是“强制性锁定”，cat读文件时直接read()并不做fcntl()，不做fcntl()就不会导致cat进程阻塞在“写锁”上</p>
<p>2.Linux设计得非常健壮，一直以运行稳定而著称。当系统中多个进程因为对信号量操作出现不恰当的P操作和V操作将导致死锁时，semop()系统调用将直接返回-1，系统拒绝错误的操作，从而避免死锁的发生（错）<br>
理由：A<br>
“策略和机制相分离”是一个重要的设计思路，当系统不能大包大揽时，系统提供“机制”，把“策略”留给程序员，简化了操作系统的设计，程序员正确操作，应该完成的功能也都能实现。这是一个典型的合理的“甩锅”行为。因特网和Linux设计上都遵循了这样的理念。SUID，bash中的条件判断，四则运算，都是相同的理念，它们简化了自己，仅提供“机制”，把“策略”留给应用程序，不失必备功能。C语言也一样，printf在C语言里也只是个函数，与语言本身无关，你不高兴完全可以设计一个替换它。C语言自己设计得很简单，以至于常用C语言的程序员，不需要查阅任何手册，都能把语法全部准确记下来。C++，你试试？</p>
<p>3.对信号量的P操作有可能导致进程进入阻塞状态，也有可能不进入阻塞状态，但是V操作确定不会导致当前进程进入阻塞状态。（对）<br>
理由：V操作要让当前进程进入阻塞状态，阻塞起来有什么意义？等什么事件？都不需要。所以，V操作不会导致当前进程阻塞，但可以想象，在内核代码里，会导致相关联P操作的进程从“阻塞态”中解除。</p>
<p>4.UDP提供了不可靠服务，所以通信线路误码导致的数据比特被翻转会传递到UDP之上的应用层程序，因此对于一些重要的应用使用UDP通信应增加类似CRC等校验机制。（错）<br>
理由:链路层的校验已经很强了，有线以太网和WiFi都提供了CRC32校验，历数所有链路层协议，只有已被淘汰的SLIP协议没有校验，其他全部有校验。这个是协议体系结构中的安排，把强校验放到链路层，因为链路层一般是硬件实现的，硬件做校验比CPU软件实现开销要小，就算软件实现的PPP over serial line，也有软件查表法计算CRC。所以，链路层可以发现（算然不见得有自动重传来纠正误码）误码。退一步讲，UDP自己也有校验和。UDP校验和是选项，校验和域0，就是没有校验；校验和非零，就采用了算术和校验（这个CPU擅长，但CPU不擅长CRC），若凑巧算术和校验是0，就在校验域填写-1。你可以WireShark看一下，你的UDP都有校验和吗？</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[深度神经网络DNN]]></title>
        <id>https://zjy98.github.io/post/shen-du-shen-jing-wang-luo-dnn/</id>
        <link href="https://zjy98.github.io/post/shen-du-shen-jing-wang-luo-dnn/">
        </link>
        <updated>2020-06-09T17:48:47.000Z</updated>
        <content type="html"><![CDATA[<h1 id="深层神经网络deep-neural-networksdnn">深层神经网络（Deep Neural Networks,DNN)</h1>
<ol>
<li>深度学习定义：一类通过多层非线性变换对高复杂性数据建模算法的集合</li>
<li>DNN定义：一种具备至少一个隐藏层的，利用激活函数去线性化，使用交叉熵作损失函数，利用反向传播优化算法（随机梯度下降算法、批量梯度下降算法）进行学习训练（调整并更新神经元之间的权重）的前馈神经网络。</li>
<li>前向传播算法：利用我们的若干个权重系数矩阵W,偏倚向量b来和输入值向量x进行一系列线性运算和激活运算，从输入层开始，一层层的向后计算，一直到运算到输出层，得到输出结果为值。<br>
<img src="https://zjy98.github.io/post-images/1591725082432.png" alt="" loading="lazy"></li>
<li>激活函数：目的是去线性化，实现非线性分类任务；线性叠加永远是线性，无法处理非线性问题。<br>
<img src="https://zjy98.github.io/post-images/1591725116000.png" alt="" loading="lazy"></li>
<li>SoftMax回归：将神经网络的输出编程一个概率分布，实现交叉熵损失函数<br>
<img src="https://zjy98.github.io/post-images/1591725136519.png" alt="" loading="lazy"></li>
<li>损失函数：刻画前向传播输出与期望值的拟合程度<br>
<img src="https://zjy98.github.io/post-images/1591725165893.png" alt="" loading="lazy"></li>
<li>神经网络优化算法<br>
<img src="https://zjy98.github.io/post-images/1591725187567.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1591725198343.png" alt="" loading="lazy"></li>
<li>学习率的优化：<br>
<img src="https://zjy98.github.io/post-images/1591725224517.png" alt="" loading="lazy"></li>
<li>交叉验证：简单交叉验证（70%-30%分裂数据集），K-折交叉验证，留一交叉验证。</li>
<li>正则化（过拟合问题）：L2-正则化； Dropout；数据增强</li>
<li>滑动平均模型：①滑动平均模型的作用是提高测试值上的健壮性，一个参数变化很大，那势必会影响到测试准确度问题，从他的公式看shadow_var = decay * shadow_var + (1 - decay)* var_new，decay控制着该shadow变量的更新速度，decay越大，那么很明显其值就会越倾向接近于旧值，而decay越小，那么var_new产生的叠加作用就会越强，其结果就会越倾向于远离旧值，那这样波动就很大，通常认为稳定性就不够好当然就不够健壮了<br>
      ②通俗的理解就是“让参数有滑动效果，目的是让参数不是一个常数，而是一个可以变的参数，提高模型的稳定性”</li>
<li>异或问题（XOR问题）:<br>
①如果要利用单层感知器画出一条直线把0和1分开，如下所示的异或问题（分类问题）是做不到的。<br>
②单层感知器无法找到一条直线作为决策边界使 (0,0) 和 (1,1) 在一个区域，而 (1,0) 和 (0,1) 在另一个区域。</li>
<li>网络层数增加带来的问题：<br>
神经网络层数加深，优化函数会越来越容易陷入局部最优解，这个局部最优解离全局最优解也可能会越来越远，同时“梯度消失”现象也会越来越严重。2006年Hinton利用预训练法缓解了局部最优解问题。为了克服“梯度消失”现象，用ReLu、maxout等激活函数代替了sigmoid函数。</li>
<li>卷积神经网络和循环神经网络：CNN是空间上深度增加的神经网络，RNN是时间上深度增加的神经网络。</li>
</ol>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[卷积神经网络CNN]]></title>
        <id>https://zjy98.github.io/post/juan-ji-shen-jing-wang-luo/</id>
        <link href="https://zjy98.github.io/post/juan-ji-shen-jing-wang-luo/">
        </link>
        <updated>2020-06-09T17:08:49.000Z</updated>
        <content type="html"><![CDATA[<h1 id="什么是神经网络">什么是神经网络</h1>
<p>这里的神经网络也指人工神经网络（Artificial Neural Networks，简称ANNs），是一种模仿生物神经网络行为特征的算法数学模型，由神经元、节点与节点之间的连接（突触）所构成。<br>
每个神经网络单元抽象出来的数学模型如下，也叫感知器，它接收多个输入（x1，x2，x3…），产生一个输出，这就好比是神经末梢感受各种外部环境的变化（外部刺激），然后产 生电信号，以便于转导到神经细胞（又叫神经元）。<br>
<img src="https://zjy98.github.io/post-images/1591722598011.png" alt="" loading="lazy"><br>
对应公式如下:<br>
hW,b(x)=f(WTx)=f(∑3i=1Wixi+b)<br>
单个的感知器就构成了一个简单的模型，但在现实世界中，实际的决策模型则要复杂得多，往往是由多个感知器组成的多层网络，如下图所示，这也是经典的神经网络模型，由输入层、隐含层、输出层构成。<br>
<img src="https://zjy98.github.io/post-images/1591722721078.png" alt="" loading="lazy"></p>
<h1 id="什么是卷积神经网络">什么是卷积神经网络</h1>
<p>受Hubel和Wiesel对猫视觉皮层电生理研究启发，有人提出卷积神经网络（CNN），Yann Lecun 最早将CNN用于手写数字识别并一直保持了其在该问题的霸主地位。近年来卷积神经网络在多个方向持续发力，在语音识别、人脸识别、通用物体识别、运动分析、自然语言处理甚至脑电波分析方面均有突破。<br>
卷积神经网络最主要的三层:卷积层、池化层、全连接神经网络 卷积神经网络的基本结构图:<br>
<img src="https://zjy98.github.io/post-images/1591722809738.png" alt="" loading="lazy"><br>
<strong>卷积神经网络与普通的神经网络的区别在于,卷积神经网络包含了一个由卷积层和池化层构成的特征抽取器</strong><br>
在卷积神经网络的卷积层中通常包含若干个特征平面,每个特征平面由一些矩形排列的的神经元组成，同一特征平面的神经元共享权值，这里共享的权值就是卷积核。卷积核一般以随机小数矩阵的形式初始化,在网络的训练过程中卷积核将学习到合理的权值。通常采用卷积核的大小为3*3,也有5*5,7*7，但大多数为奇数.卷积核带来的好处是减少了网络各层之间的连接,参数减少，又降低了过拟合的风险。池化层也叫子采样,通常有max-pooling 和 average-pooling ,但通常我们使用max-pooling.卷积和池化大大简化了模型复杂度,减少了参数。</p>
<h2 id="什么是卷积">什么是卷积？</h2>
<p>当给定了一张新图时,CNN并不能准确的知道这些特征到底要匹配原图的哪些部分,所以它会在原图中把每一个可能的位置都进行尝试,相当于把这个特征(feature)变成了一个过滤器。这个用来匹配的过程就称为卷积操作。(特别注意,在卷积神经网络中进行的卷积操作其实本质上并不是严格的卷积,许多数学家把他们叫做互相关,但是在许多DL文献中我们把他看成卷积,真正的卷积是需要进行水平垂直的镜像) 卷积操作如图:<br>
<img src="https://zjy98.github.io/post-images/1591723238883.gif" alt="" loading="lazy"></p>
<p>说白了要计算一个feature和其在原图上对应的某一小块的结果,只需要将两个小块对应位置的像素值进行乘法运算,然后将整个小块内的乘法运算的结果累加起来。如下是一个6x6的灰度图像，构造一个3x3的矩阵，在卷积神经网络中通常称之为filter，对这个6x6的图像进行卷积运算，以左上角的-5计算为例 其它的以此类推，让过滤器在图像上逐步滑动，对整个图像进行卷积计算得到一幅4x4的图像。<br>
<img src="https://zjy98.github.io/post-images/1591723303966.png" alt="" loading="lazy"></p>
<h3 id="卷积步长">卷积步长</h3>
<p>卷积步长是指过滤器在图像上滑动的距离，前两部分步长都默认为1，如果卷积步长为2，卷积运算过程为：<br>
<img src="https://zjy98.github.io/post-images/1591723347508.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1591723358264.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1591723368865.png" alt="" loading="lazy"></p>
<h3 id="卷积是如何提取特征的">卷积是如何提取特征的？</h3>
<p>假如你有一张如下的图像，你想让计算机搞清楚图像上有什么物体，你可以做的事情是检测图像的垂直边缘和水平边缘。<br>
<img src="https://zjy98.github.io/post-images/1591723469929.png" alt="" loading="lazy"><br>
为什么这种卷积计算可以得到图像的边缘，下图0表示图像暗色区域，10为图像比较亮的区域，同样用一个3x3过滤器，对图像进行卷积，得到的图像中间亮，两边暗，亮色区域就对应图像边缘。<br>
<img src="https://zjy98.github.io/post-images/1591723523985.png" alt="" loading="lazy"><br>
注意:这里由于我们图片大小仅仅是6x6所以可以发现中间的亮色区域是很宽的,当我们的图很大的时候是不会发生这种情况的。 通过以下的水平过滤器和垂直过滤器，可以实现图像水平和垂直边缘检测。<br>
<img src="https://zjy98.github.io/post-images/1591723725655.png" alt="" loading="lazy"></p>
<h3 id="pading">pading</h3>
<p>在上部分中，通过一个3x3的过滤器来对6x6的图像进行卷积，得到了一幅4x4的图像，假设输入图像大小nxn，过滤器filter大小为fxf，步长为s,那么输出图像大小为 (⌊n−fs⌋+1) x (⌊n−fs⌋+1) 这样做卷积运算的缺点是卷积图像的大小会不断缩小,另外图像的左上角元素只被一个输出所使用,而下图中红色阴影部分的像素却被多个输出使用了,所以图像的边缘像素在输出中采用较少,这也就意味着你会丢掉许多图像边缘信息,为了引入这两个问题我们引入padding操作,也就是在图像做卷积操作之前,沿着图像边缘用0进行填充对于3x3的过滤器，我们填充宽度为1时，就可以保证输出图像和输入图像一样大。如下图<br>
<img src="https://zjy98.github.io/post-images/1591724481841.png" alt="" loading="lazy"></p>
<h3 id="彩色图像的卷积">彩色图像的卷积</h3>
<p>以上我们所说的卷积都是灰度值图像的,也就是一维的。我们知道彩色图像在计算机中都是按照RGB来存的,所以如果我们想要在彩色图像上进行卷一那么过滤器的大小就不能使3x3 而应该是3x3x3（RGB三通道,通道数）卷积生成图像中每个像素值为 3∗3∗3 过滤器对应位置和图像对应位置相乘累加,过滤器依次再RGB图像上滑动,最终生成图像大小为4x4<br>
<img src="https://zjy98.github.io/post-images/1591724046264.png" alt="" loading="lazy"><br>
另外一个问题是，如果我们在不仅仅在图像总检测一种类型的特征，而是要同时检测垂直边缘、水平边缘、45度边缘等等，也就是多个过滤器的问题。如果有两个过滤器，最终生成图像为4x4x2的立方体，这里的2来源于我们采用了两个过滤器。如果有10个过滤器那么输出图像就是4x4x10的立方体。<br>
<img src="https://zjy98.github.io/post-images/1591724151273.png" alt="" loading="lazy"></p>
<h3 id="池化pooling">池化Pooling</h3>
<p>为了有效减少计算,CNN使用另一个有效的工具被称为&quot;池化&quot;。池化就是将输入图像进行缩小,减少像素信息,保留重要的信息。<br>
<strong>Max-pooling最大值池化</strong><br>
最大池化思想很简单，以下图为例，把4x4的图像分割成4个不同的区域，然后输出每个区域的最大值，这就是最大池化所做的事情。其实这里我们选择了2<em>2的过滤器，步长为2。在一幅真正的图像中提取最大值可能意味着提取了某些特定特征，比如垂直边缘、一只眼睛等等。<br>
<img src="https://zjy98.github.io/post-images/1591724211509.png" alt="" loading="lazy"><br>
以下是一个过滤器大小为3</em>3，步长为1的池化过程，具体计算和上面相同，最大池化中输出图像的大小计算方式和卷积网络中计算方法一致，如果有多个通道需要做池化操作，那么就分通道计算池化操作。<br>
<img src="https://zjy98.github.io/post-images/1591724245973.png" alt="" loading="lazy"><br>
最大池化（max-pooling）因为对于每一个filter,它其实就是一个特征提取器,专门用来提取某种特征,所以对于特定区域内,最后的结果越大表示匹配的越好。也就是说，它不会具体关注窗口内到底是哪一个地方匹配了，而只关注是不是有某个地方匹配上了。<br>
<strong>average polling平均池化</strong><br>
平均池化和最大池化唯一的不同是，它计算的是区域内的平均值而最大池化计算的是最大值。在日常应用使用最多的还是最大池化。<br>
<img src="https://zjy98.github.io/post-images/1591724289444.png" alt="" loading="lazy"><br>
池化的超参数:filter的大小,步长,池化的类型. 虽然这里池化层的参数我们也叫超参数,但是一般情况下她其实就是固定的,是不需要CNN进行学习的,一般我们采用最大值池化,过滤器大小为2,步长为2.</p>
<h3 id="激活函数relu">激活函数Relu</h3>
<p>上面介绍卷积神经网络CNN结构时用的那个图大家可以看到,卷积层我们一般用CONV来表示,RELU就是我们激活函数的一种,POOL就是我们的池化层，FC就是全连接神经网络。这里需要注意的是池化层的多少没有很明确的规定,需要我们自己进行交叉验证或者调参来决定。而每一个卷积层后都是要跟着激活函数的RELU的。 常用的激活函数有sigmod,tanh,relu等，其中sigmod,tanh主要用于全连接fc层,而Relu主要用于卷积层。回顾一下我们前面讲的神经网络中,单个神经元在接受到和输入计算wx+b后,求和经过一个函数f,输出得到h(x).这里的f就是我们的激活函数。 激活函数的主要作用是加入非线性因素,把卷积层输出结果做非线性映射。这也是我们引入神经网络的目的,如果不加入激活函数那么对wx+b的计算还是线性的<br>
<img src="https://zjy98.github.io/post-images/1591724341103.png" alt="" loading="lazy"><br>
在卷积神经网络中激活函数一般使用Relu(The Rectified Linear Unit，修正线性单元),他的主要特点是收敛速度快,求梯度简单,公式简单max(0,s)，即对于输入的负值输出全为0,正值输出其本身。</p>
<h3 id="全连接层fully-connected-layers">全连接层(Fully connected layers)</h3>
<p>全连接层在整个神经网络中期到分类器的作用,即通过卷积、激活函数、池化等深度网络后,再经过全连接层对结果进行分类。这里我们还是要将得到的图像拉伸成一个一维向量,就像前面我们使用fc对图像(像素较小的)进行分类一样，由于神经网络是属于监督学习，在模型训练时，根据训练样本对模型进行训练，从而得到全连接层的权重(在每个分类的得分)。<br>
<img src="https://zjy98.github.io/post-images/1591724433485.png" alt="" loading="lazy"></p>
<h1 id="为什么需要cnn">为什么需要CNN</h1>
<p>全连接神经网络参数过于庞大,例如:假设我们有一张1000x1000的图像,隐藏层我们有100万个神经元,由于每个隐藏层的神经元都要与图像的每个像素点连接,所以这里我们就有1000000∗1000000=10^12 个连接,也就需要10^12个参数,那么这个参数是过于庞大的。 卷积神经网络有两个神器可以用来降低参数,一个叫局部感受野,一叫交权值共享。</p>
<h2 id="局部感受野">局部感受野</h2>
<p>我们一般认为人对外界的认知是从局部到全局的,而图像的空间联系也是局部的像素联系较为紧密,而距离较远的像素相关性较弱。因而,每个神经元其实没必要对全局图像进行感知,只需要对局部进行感知,然后在更高层将局部的信息综合起来就得到了全局的信息。这种思想也是受启发与生物学里面的系统结构，视觉皮层的神经元就是局部接受信息的（即这些神经元只响应某些特定区域的刺激） 如下图所示：左图为全连接，右图为局部连接。<br>
<img src="https://zjy98.github.io/post-images/1591724562762.png" alt="" loading="lazy"><br>
这个图就是描述上面的例子,这里如果我们采用局部感受野的话可以知道,每个像素不需要和所有神经元都连接,假设局部感受野的大小为10x10,隐藏层的神经元都只和每个感受野连接,此时我们的参数个数为 1000000∗10∗10=10^8. 这样的话我们的参数个数就变为了原来的万分之一,但是还是很多啊,所以就出现了权值共享</p>
<h2 id="权值共享">权值共享</h2>
<p>上面当中每个隐藏层神经元都连接不同的局部感受野,那么如果每个局部感受野的参数都相同,那么我的参数就变为 10*10 = 100.我们可以把这100参数对应的卷积操作看成是提取特征的一种方式,与位置无关。这是CNN的亮点之一,但是有一个问题就是说如果所有的参数都相同,也就是说我们只是提取了特定的某种特征,那么如果我们想要提取多种特征怎么办,这时候我们就需要多增加几个滤波器,每个filter对应提取不同的特征(参数不一样)。</p>
<p>例子：区分X和O<br>
<img src="https://zjy98.github.io/post-images/1591724674567.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1591724717113.png" alt="" loading="lazy"></p>
<p>再回顾总结一下，卷积神经网络主要由两部分组成，一部分是特征提取（卷积、激活函数、池化），另一部分是分类识别（全连接层），下图便是著名的手写文字识别卷积神经网络结构图：<br>
<img src="https://zjy98.github.io/post-images/1591724754183.png" alt="" loading="lazy"><br>
具体来源：https://statusrank.xyz/articles/a0a72429.html</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[决策树]]></title>
        <id>https://zjy98.github.io/post/jue-ce-shu/</id>
        <link href="https://zjy98.github.io/post/jue-ce-shu/">
        </link>
        <updated>2020-06-03T14:43:20.000Z</updated>
        <content type="html"><![CDATA[<p>决策树其实就是按节点分类数据集的一种方法。在本文中，我将讨论数学上如何使用信息论划分数据集，并编写代码构建决策树（本文使用ID3算法构建决策树，ID3算法可以用来划分标称型数据集）。</p>
<p>创建决策树进行分类的流程如下：</p>
<p>（1）    创建数据集</p>
<p>（2）    计算数据集的信息熵</p>
<p>（3）    遍历所有特征，选择信息熵最小的特征，即为最好的分类特征</p>
<p>（4）    根据上一步得到的分类特征分割数据集，并将该特征从列表中移除</p>
<p>（5）    执行递归函数，返回第三步，不断分割数据集，直到分类结束</p>
<p>（6）    使用决策树执行分类，返回分类结果</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[信号和重定向]]></title>
        <id>https://zjy98.github.io/post/xin-hao-he-chong-ding-xiang/</id>
        <link href="https://zjy98.github.io/post/xin-hao-he-chong-ding-xiang/">
        </link>
        <updated>2020-05-29T10:27:10.000Z</updated>
        <content type="html"><![CDATA[<h1 id="管道">管道</h1>
<ul>
<li>
<p>创建管道<br>
int pipe(int pfd[2])<br>
int pipe(int *pfd)<br>
int pipe(int pfd[])<br>
创建一个管道，pfd[0]和pfd[1]分别为管道两端的文件描述字，pfd[0]用于读，pfd[1]用于写</p>
</li>
<li>
<p>管道写<br>
ret = write(pfd[1],buf,n)<br>
若管道已满，则被阻塞，直到管道另一端read将已进入管道的数据读走为止<br>
管道容量：某一有限值，如8192字，与操作系统实现相关。</p>
</li>
<li>
<p>管道读<br>
ret = read(pfd[0],buf,n)<br>
若管道写端已关闭，则返回0<br>
若管道为空，且写端文件描述自未关闭，则被阻塞<br>
若管道不为空（设管道中实际有m个字节）<br>
n≥m 则读m个<br>
n＜m则读n个<br>
实际读取的数目作为read的返回值<br>
注意：管道是无记录边界的字节流通信</p>
<ul>
<li>
<p>关闭管道close<br>
关闭写端则读端read调用返回0<br>
关闭读端则写端write导致进程收到SIGPIPE信号（默认处理是终止进程，则信号可以被捕捉）<br>
写端wirte返回-1 errno被设为EPIPE<br>
<img src="https://zjy98.github.io/post-images/1590903131169.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590903228189.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590903944349.png" alt="" loading="lazy"></p>
</li>
<li>
<p>管道传输是一个无记录边界的字节流<br>
写端一次write所发数据读端可能需多次read才能读取<br>
写端多次write所发数据读端可能一次read就全部读出</p>
</li>
<li>
<p>父子进程需要双向通信时，应采用两个管道<br>
用一个管道，进程可能会受到自己刚写到管道取的数据<br>
仅仅使用一个管道并增加其他同步方式也可以，太复杂</p>
</li>
<li>
<p>父子进程使用两个管道传递数据，有可能死锁<br>
父进程因输出管道满而写，导致被阻塞<br>
子进程因需要向父进程写回足够多的数据而导致写也被阻塞，产生死锁<br>
多进程通信问题必须仔细分析流量控制和死锁问题<br>
** 管道的缺点：没有记录边界 **<br>
在xshe2加入管道命令<br>
<img src="https://zjy98.github.io/post-images/1590904371891.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590904423569.png" alt="" loading="lazy"><br>
注意fork后，要关闭写端。close(fd[1])自己的进程没关闭，父进程已经死亡，还有人在写，会死锁。<br>
不需要的文件描述符必须关闭，把资源留出来。</p>
</li>
</ul>
</li>
<li>
<p>命名管道<br>
pipe创建的管道（匿名管道）的缺点：只限于同祖先进程间通信<br>
命名管道：允许不相干的进程（没有共同的祖先）访问FIFO管道<br>
命名管道的创建：<br>
用命令 mknod pipe0 p<br>
创建一个文件，名字为pipe0<br>
用ls -l 列出时，文件类型为p<br>
发送者：fd = open(&quot;pipe0&quot;,O_WRONLY);<br>
write(fd,buf,len);<br>
接收者：fd = open(&quot;pipe0&quot;,O_RDONLY);<br>
read = (fd,buf,sizeof(buf));</p>
</li>
</ul>
<h1 id="信号">信号</h1>
<h2 id="信号的产生和类型">信号的产生和类型</h2>
<ul>
<li>命令kill<br>
kill -signal PID-list<br>
kill命令用于向进程发送一个信号<br>
kill 1275 向进程1275的进程发送信号，默认信号为15，一般会导致进程死亡<br>
kill -9 1326 向进程1326发送信号9，导致进程死亡</li>
</ul>
<h2 id="进程组">进程组</h2>
<p>进程在其PCB结构中有p_pgrp域<br>
p_pgrp都相同的进程构成一个进程组<br>
如果p_pgrp=p_pid则该进程是组长<br>
setsid()系统调用将PCB中的p_pgrp改为进程自己的PID，从而脱离原进程组，成为新进程组的组长<br>
fork创建的进程继承父进程p_pgrp,与父进程同组<br>
举例：kill命令的PID为0时，向与本进程同组的所有进程发送信号</p>
<h2 id="信号机制">信号机制</h2>
<p>信号是送到进程的“软件中断“，通知进程出现了非正常事件<br>
信号的产生：<br>
用户态进程：自己或者其他进程发出的 使用kill()或者alarm()调用<br>
操作系统内核产生信号（往往由中断引发，也有软件触发）<br>
段违例信号SIGSEGV：档进程试图存取它的地址空间以外的存储单元时，内核向进程发送段违例信号<br>
浮点溢出信号SIGFPE:零做除数时，内核向进程发送浮点溢出信号<br>
信号SIGPIPE:关闭管道读端则写端write导致进程收到信号SIGPIPE（纯粹软件产生）<br>
<img src="https://zjy98.github.io/post-images/1590905582032.png" alt="" loading="lazy"></p>
<h2 id="进程对信号的处理">进程对信号的处理</h2>
<ul>
<li>设置为缺省处理方式（大部分处理是程序中止，有的会产生core文件）</li>
<li>信号被忽略</li>
<li>信号被捕捉<br>
用户事先注册好一个函数，当信号发生后就去执行这一函数<br>
信号被设为缺省模式：signal(SIGINT,SIG_DFL)<br>
信号被忽略：signal(SIGINT,SIG_IGN)<br>
在执行了这个调用后，进程就不再收到SIGINT信号<br>
注意：某信号被忽略，作为进程的一种属性被它的子进程继承<br>
<img src="https://zjy98.github.io/post-images/1590910469169.png" alt="" loading="lazy"><br>
信号的捕捉：<br>
信号被捕捉并由一个用户函数来处理<br>
信号到达时，这个函数将被调用来处理那个信号<br>
<img src="https://zjy98.github.io/post-images/1590910630475.png" alt="" loading="lazy"><br>
僵尸进程：</li>
<li>僵尸子进程<br>
子进程终止，将至进程（defunct或zombie）出现，父进程使用wait系统调用收尸后消除僵尸<br>
僵尸进程不占用内存资源但占用内核proc表项，僵尸进程太多会导致proc表耗尽而无法再创建新进程</li>
<li>子进程中止后的异步通知机制<br>
子进程中止后，系统会向父进程发送信号SIGCLD</li>
<li>不导致僵尸子进程出现的方法<br>
忽略对SIGCLD信号的处理<br>
signal(SIGCLD,SIG_IGN)<br>
捕获SIGCLD信号，执行wait系统调用</li>
</ul>
<h2 id="发送信号">发送信号</h2>
<ul>
<li>系统调用kill<br>
int kill(ind pid,int sig)<br>
返回值：0--成功 1--失败</li>
<li>kill调用分几种情况<br>
当pid&gt;0时，向指定的进程发信号<br>
当pid=0时，向与本进程同组的所有进程发信号<br>
当pid&lt;\0时，向以-pid为组长的所有进程发信号<br>
当sig=0时，则信号根本就没有发送，但可根据此判断一个已知PID的进程是否仍然运行<br>
kill(pid,0);如果函数返回值为-1就可根据errno判断：errno=ESRRCH说明不存在pid进程</li>
</ul>
<h2 id="系统调用与信号">系统调用与信号</h2>
<ul>
<li>进程睡眠<br>
系统调用执行时会导致进程处于睡眠状态<br>
如：scanf(),sleep(),msgrcv()，操作外设的read(),write()等等</li>
<li>睡眠进程收到信号后处理<br>
进程正在睡眠时收到信号，进程就会从睡眠中被惊醒，系统调用立即被半途终止，返回值为-1，errno一般被设置为EINTR<br>
注意：有的系统调用在特殊情况（与内核中的代码相关尤其是驱动程序）下睡眠很深，信号到达也不能将它惊醒（有的进程用kill -9也杀不死）<br>
例如：sleep(1000)返回，有可能只睡眠了10秒</li>
</ul>
<h2 id="pause与alarm系统调用">pause与alarm系统调用</h2>
<ul>
<li>pause()<br>
等待信号，进程收到信号前一直处于睡眠状态</li>
<li>设置进程报警时钟（闹钟）<br>
int alarm(int secs)<br>
进程报警时存储在它内核系统数据中，报警时钟到时，进程收到SIGALRM信号<br>
子进程继承父进程的报警时钟值，报警时钟exec执行后保持这一设置<br>
进程收到SIGALRM后的默认处理是终止进程<br>
（可以利用这一功能，fork后exec前做设置，限制加载程序的执行时间）<br>
alarm参数为secs<br>
当secs&gt;0时，将时钟设置成secs指定的秒数<br>
当secs=0时，关闭报警时钟<br>
<img src="https://zjy98.github.io/post-images/1590920846887.png" alt="" loading="lazy"></li>
</ul>
<h1 id="全局跳转">全局跳转</h1>
<p><img src="https://zjy98.github.io/post-images/1590920931109.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590920981726.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590921013677.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590921196135.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590921258872.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590921387846.png" alt="" loading="lazy"></p>
<p>关于信号：<br>
破坏了程序顺序执行的模型，导致重入<br>
例如：程序中有printf,在信号处理程序中也有printf<br>
sigaction()<br>
signal()的升级版本，使用起来更复杂<br>
其他编程语言中的try-catch-finally结构</p>
<p>错题：<br>
1.在一个普通函数中，goto语句可以实现函数内部语句之间的跳转。全局跳转可以实现跨函数之间的跳转，但是只能跳转到本函数或本函数调用嵌套之外层函数的某一执行过的位置恢复运行。之前程序运行从这一位置到全局跳转前的这段时间里新诞生的局部变量都被销毁，但对全局变量的修改无法恢复。（对）<br>
2.在xsh2.c样例程序中，主循环结束前执行了close(fd[0])。如果省略了此操作，下面哪个说法正确？<br>
A.<br>
管道读写端子进程都能正常运行结束并且完成预定的功能，但父进程文件描述符资源不能正常回收，多轮循环以后资源耗尽程序将无法完成预期功能<br>
3.进程设置捕获某信号后执行函数a，当进程处于阻塞状态时收到这个信号，进程将转去执行函数a，函数a执行完毕，进程将重返之前的阻塞状态，等待条件满足后退出阻塞状态。（错）</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[循环神经网络RNN]]></title>
        <id>https://zjy98.github.io/post/xun-huan-shen-jing-wang-luo/</id>
        <link href="https://zjy98.github.io/post/xun-huan-shen-jing-wang-luo/">
        </link>
        <updated>2020-05-29T00:16:13.000Z</updated>
        <content type="html"><![CDATA[<p>给定样本x,学习器为其赋予一个类别（label)y或推导出其在y上的概率分布<br>
eg. hw(x)=w0+w1x或h(x)=argmaxkP(yk|x)<br>
<img src="https://zjy98.github.io/post-images/1590711475192.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590711517764.png" alt="" loading="lazy"><br>
特点：<br>
不同于在样本上做多个独立预测，而是假设样本之间存在关联，进而在样本序列上做预测（或序列预测）<br>
问题：<br>
如何建模序列内部的关联？<br>
如何从一个输入序列，预测对应的输出序列？</p>
<h1 id="建模序列数据">建模序列数据</h1>
<p>采用链式法则表示一个观测序列的联合概率？<br>
<img src="https://zjy98.github.io/post-images/1590711659849.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590711664437.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590711668302.png" alt="" loading="lazy"></p>
<p>如果考虑两个不同的序列，例如输入和输出序 列，如何采用Markov模型建模？<br>
隐马尔可夫模型(Hidden Markov Model, HMM) – 一个经典的建模序列数据的模型：<br>
<img src="https://zjy98.github.io/post-images/1590714787668.png" alt="" loading="lazy"></p>
<h1 id="循环神经网络rnn">循环神经网络RNN</h1>
<p><img src="https://zjy98.github.io/post-images/1590714779504.png" alt="" loading="lazy"><br>
U：输入层到隐层<br>
V：隐层到输出层<br>
W：隐层到隐层</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[学习计划]]></title>
        <id>https://zjy98.github.io/post/ben-zhou-ji-hua/</id>
        <link href="https://zjy98.github.io/post/ben-zhou-ji-hua/">
        </link>
        <updated>2020-05-24T17:34:58.000Z</updated>
        <content type="html"><![CDATA[<ol>
<li>交换原理的的课看完，作业写了（周一）√</li>
<li>周一下午练车√</li>
<li>计算机系统结构实验√</li>
<li>机器学习聚类实验√</li>
<li>Linux实验4√</li>
<li>软工小程序√</li>
<li>软工文档  √</li>
<li>交换原理的实验 √</li>
<li>OS实验（周一开会）写硬盘操作√</li>
<li>智慧树题刷完√</li>
<li>机器学习决策树实验√</li>
<li>大创结题报告 √</li>
<li>DNN实验 DDL√</li>
<li>RNN实验 DDL：6月19</li>
<li>复习软件工程(6.15)、计算机系统结构（6.24)、交换原理(6.18)、Linux(6.19)</li>
</ol>
<p>1.RNN输入维度</p>
<p>2.模型构建好，有输入处理，中间RNN，全连接层，输出概率</p>
<p>3.损失函数定义 交叉熵</p>
<p>4.训练的写好</p>
<p>准备开始复习计算机系统结构：看书→作业→PPT</p>
]]></content>
    </entry>
    <entry>
        <title type="html"><![CDATA[进程的创建和重定向]]></title>
        <id>https://zjy98.github.io/post/jin-cheng-de-chuang-jian-he-chong-ding-xiang/</id>
        <link href="https://zjy98.github.io/post/jin-cheng-de-chuang-jian-he-chong-ding-xiang/">
        </link>
        <updated>2020-05-21T16:16:52.000Z</updated>
        <content type="html"><![CDATA[<h1 id="进程的生命周期从生到死">进程的生命周期：从生到死</h1>
<p>程序运行起来：产生了一个进程。<br>
<img src="https://zjy98.github.io/post-images/1590077907649.png" alt="" loading="lazy"></p>
<h2 id="fork创建新进程">fork:创建新进程</h2>
<ul>
<li>功能<br>
fork系统调用时创建新进程的唯一方式<br>
原先的进程叫做父进程，新进程被称作子进程<br>
完全复制：新进程的指令，用户数据段，堆栈段<br>
部分复制：系统数据段</li>
<li>fork返回值：父子进程都收到返回值，但不相同<br>
返回值很关键，它是区分父进程（返回值&gt;0是子进程的PID）和子进程（返回值=0），失败时返回-1</li>
<li>内核实现<br>
创建新的PCB，复制父进程环境（包括PCB和内存资源）给子进程<br>
父子进程可以共享程序和数据（如copy-on-write技术，COW）但是这些系统核心的安排，对程序员透明<br>
<img src="https://zjy98.github.io/post-images/1590078682173.png" alt="" loading="lazy"><br>
最后两行，可能是父进程先执行，也可能是子进程<br>
<img src="https://zjy98.github.io/post-images/1590078789026.png" alt="" loading="lazy"><br>
一边父进程，一边子进程<br>
执行fork(),两个阶段，1执行fork调用，2恢复运行 给ret赋值两个进程都要赋值<br>
父子进程有区别，父进程赋值的是大于0的值，子进程是==0的值（父子进程的程序一样）<br>
<img src="https://zjy98.github.io/post-images/1590078911802.png" alt="" loading="lazy"><br>
这个执行结果来看，子进程先结束</li>
</ul>
<p><img src="https://zjy98.github.io/post-images/1590079147167.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590079162563.png" alt="" loading="lazy"></p>
<h2 id="exec系统调用">exec系统调用</h2>
<ul>
<li>功能<br>
用一个指定的程序文件，重新初始化一个进程<br>
可指定新的命令行参数和环境参数（初始化堆栈底部）<br>
exec不创建新进程，只是将当前进程重新初始化了指令段和用户端段，堆栈段以及CPU的PC指针</li>
<li>6种格式exec系统调用<br>
exec前缀，后跟一至两个字母<br>
l-list, v-vector, e-env, p-path<br>
l与v:指定命令行参数的两种方式，l以表的形式，v要事先组织成一个指针数组<br>
e:需要指定环境变量PATH查找可执行文件<br>
p:使用环境变量PATH查找可执行文件<br>
六种格式的区别：不同的参数方式初始化堆栈底部</li>
</ul>
<h2 id="僵尸进程zombie或defunct">僵尸进程（zombie或defunct)</h2>
<ul>
<li>进程生命期结束时的特殊状态<br>
系统已经释放了进程占用的包括内存在内的系统资源，但仍在内核中保留进程的部分数据结构，记录进程的终止态，等待父进程来收尸。<br>
父进程的收尸动作完成后，僵尸进程不再存在。</li>
<li>僵尸进程占用资源很少，仅占用内核进程表资源<br>
过多的僵尸进程会导致有限地进程表用完</li>
<li>孤儿进程：父进程死了，子进程都变成1号进程的子进程</li>
</ul>
<h2 id="wait系统调用收尸">wait系统调用（收尸）</h2>
<ul>
<li>功能<br>
等待进程的子进程终止<br>
如果已有子进程终止，则立即返回<br>
<img src="https://zjy98.github.io/post-images/1590080061781.png" alt="" loading="lazy"></li>
</ul>
<h1 id="写一个简单的shell">写一个简单的shell</h1>
<h2 id="字符串库函数strtok">字符串库函数strtok</h2>
<p><img src="https://zjy98.github.io/post-images/1590337219763.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590337409218.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590337794150.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590337763764.png" alt="" loading="lazy"></p>
<h2 id="库函数system运行一个命令">库函数system：运行一个命令</h2>
<p>int system(char *string)<br>
执行字符串传递的shell命令，可使用管道符和重定向<br>
库函数system(),是利用系统调用fork,exec,wait实现的<br>
<img src="https://zjy98.github.io/post-images/1590338359341.png" alt="" loading="lazy"></p>
<h1 id="进程与文件描述符">进程与文件描述符</h1>
<h2 id="活动文件目录afd">活动文件目录AFD</h2>
<ul>
<li>磁盘文件目录（分2级）<br>
文件名，i节点</li>
<li>活动文件目录（分3级）<br>
文件描述符表FDT：每个进程一张，PCB的user结构中<br>
user结构中整型数组u_ofile记录进程打开的文件<br>
文件描述符fd是u_ofile数组的下标<br>
系统文件表SFT：整个核心一张，file结构</li>
</ul>
<pre><code class="language-c">struct file{
    char f_flag; //读写操作要求
    char f_count;//引用计数
    long f_offset;//文件读写位置指针
    int f_inode;//内核中inode数组的下标
}
</code></pre>
<p>活动i节点表：整个核心一张，inode结构<br>
内存中inode表是外存中inode的缓冲<br>
内存inode表里也有个专用的引用计数<br>
<img src="https://zjy98.github.io/post-images/1590338772959.png" alt="" loading="lazy"></p>
<h2 id="文件描述符的继承和关闭">文件描述符的继承和关闭</h2>
<p>fork创建的子进程继承父进程的文件描述符表<br>
父进程在fork前打开的文件，父子进程有相同的文件偏移<br>
<img src="https://zjy98.github.io/post-images/1590339425330.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590339445517.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590339714460.png" alt="" loading="lazy"></p>
<h1 id="重定向">重定向</h1>
<p>类似文件描述符的复制</p>
<ul>
<li>系统调用<br>
int dup2(int fd1,int fd2)</li>
<li>功能<br>
复制文件描述符fd1到fd2<br>
fd2可以是空闲的文件描述符<br>
如果fd2是已打开文件，则关闭已打开文件<br>
<img src="https://zjy98.github.io/post-images/1590339931448.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590340733716.png" alt="" loading="lazy"><br>
<img src="https://zjy98.github.io/post-images/1590340790365.png" alt="" loading="lazy"></li>
</ul>
<h1 id="错题">错题：</h1>
<pre><code class="language-c">#include &lt;stdio.h&gt;
#include &lt;unistd.h&gt;
int main(void)
{
    int i = 0;
    printf(&quot;PID=%d\n&quot;, getpid());
    for (;;) {
        if (!fork())
            return 0;
        sleep(1);
        printf(&quot;%d\n&quot;, ++i);
    }
}
</code></pre>
<p>编译链接后生成的可执行程序为foo，运行./foo得到的第一行输出为：</p>
<p>PID=7812</p>
<p>然后程序继续运行，一段时间以后，在其他终端上执行vi bar.c失败，得到的提示信息为：</p>
<p>-bash: fork: retry: Resource temporarily unavailable</p>
<p>A.<br>
**在另外一个终端上执行kill 7812之后，系统恢复正常 **</p>
<p>程序中第9行if  (!fork())应该修改为if (fork() == 0)。尽管语义相同，但可读性不好，前者容易误导别人是判断fork失败，fork失败将不创建子进程，实际上是fork成功且自身是子进程。<br>
fork()后子进程直接终止，就是产生了僵尸，但是父进程没有执行wait消除僵尸。kill是内部命令，不需要创建新的进程，Ctrl-C也不需要创建进程，所以可以把foo进程杀死，foo的所有子进程（尽管都是僵尸状态），不会成为foo的父进程的子进程，而是成为操作系统进程1的子进程，1号进程会删除僵尸子进程，系统恢复正常，可以创建新的进程。reboot和killall都是外部命令，需要启动新的进程，当僵尸进程把操作系统内核中的全部进程槽占满了之后，启动失败。<br>
如果foo进程是一个网络服务后台进程，脱离终端在后台运行，出现这样的问题，任何用户也不可能再完成登录，因为登录就需要创建shell进程，就算知道了PID连执行kill命令的机会都没有。执行关机命令的机会都没有，就麻烦了。<br>
如果foo进程是后台进程没有机会Ctrl-C，即使有一个已登录的终端，若不知道进程的PID号，ps运行不了，也没法完成kill</p>
]]></content>
    </entry>
</feed>